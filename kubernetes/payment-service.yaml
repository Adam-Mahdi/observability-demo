apiVersion: v1
kind: Namespace
metadata:
  name: production
  labels:
    environment: production
    monitoring: enabled

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: production
  labels:
    app: payment-service
    version: v2.3.0
    team: platform
  annotations:
    datadog/service: payment-service
    datadog/version: v2.3.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
        version: v2.3.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        ad.datadoghq.com/payment-service.check_names: '["openmetrics"]'
        ad.datadoghq.com/payment-service.init_configs: '[{}]'
        ad.datadoghq.com/payment-service.instances: |
          [
            {
              "openmetrics_endpoint": "http://%%host%%:8080/metrics",
              "namespace": "payment_service",
              "metrics": ["*"]
            }
          ]
    spec:
      serviceAccountName: payment-service
      containers:
      - name: payment-service
        image: payment-service:v2.3.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        env:
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_SERVICE
          value: payment-service
        - name: DD_ENV
          value: production
        - name: DD_VERSION
          value: v2.3.0
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_ENABLED
          value: "true"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.monitoring:4317"
        - name: OTEL_SERVICE_NAME
          value: payment-service
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=payment-service,service.version=v2.3.0,deployment.environment=production"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: payment-db-secret
              key: host
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: payment-db-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: payment-db-secret
              key: password
        - name: REDIS_HOST
          value: payment-cache.redis.cache.amazonaws.com
        - name: REDIS_PORT
          value: "6379"
        - name: STRIPE_API_KEY
          valueFrom:
            secretKeyRef:
              name: payment-providers
              key: stripe-key
        - name: PAYPAL_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: payment-providers
              key: paypal-client-id
        - name: PAYPAL_SECRET
          valueFrom:
            secretKeyRef:
              name: payment-providers
              key: paypal-secret
        - name: CIRCUIT_BREAKER_ENABLED
          value: "true"
        - name: CIRCUIT_BREAKER_THRESHOLD
          value: "5"
        - name: CIRCUIT_BREAKER_TIMEOUT
          value: "30000"
        - name: DB_POOL_SIZE
          value: "20"
        - name: DB_POOL_TIMEOUT
          value: "10"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: payment-service-config
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - payment-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: production
  labels:
    app: payment-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: ClusterIP
  selector:
    app: payment-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 8081
    targetPort: 8081
    protocol: TCP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: payment-service-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: payment-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 30
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: payment-service-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: payment-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: payment-service
  namespace: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/payment-service-role

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-service-config
  namespace: production
data:
  application.yaml: |
    server:
      port: 8080
      shutdown: graceful
    
    spring:
      application:
        name: payment-service
      datasource:
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 10000
          idle-timeout: 600000
          max-lifetime: 1800000
    
    management:
      endpoints:
        web:
          exposure:
            include: health,metrics,prometheus,info
      metrics:
        export:
          datadog:
            enabled: true
            step: 30s
        tags:
          application: payment-service
          environment: production
    
    resilience4j:
      circuitbreaker:
        instances:
          payment-provider:
            sliding-window-size: 10
            minimum-number-of-calls: 5
            failure-rate-threshold: 50
            wait-duration-in-open-state: 30000
            permitted-number-of-calls-in-half-open-state: 3
      retry:
        instances:
          payment-provider:
            max-attempts: 3
            wait-duration: 1000
            retry-exceptions:
              - java.net.SocketTimeoutException
              - java.io.IOException
    
    logging:
      level:
        root: INFO
        com.company.payment: DEBUG
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} - %X{dd.trace_id} %X{dd.span_id} - %logger{36} - %msg%n"

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: payment-service-network-policy
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: payment-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
      podSelector:
        matchLabels:
          app: api-gateway
    - namespaceSelector:
        matchLabels:
          name: production
      podSelector:
        matchLabels:
          app: order-service
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: production
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS